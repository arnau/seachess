date = 2020-02-02
author = "arnau"
id = "2020-W05"
title = "Issue 2020-W05"
type = "Bulletin"
status = "published"
introduction = """
These are the things that caught my attention this week.
"""

[[links]]
title = "TerminusDB"
url = "https://terminusdb.com/"
comment = """
A graph database focused on knowledge graph representation. The new
version, 1.1, introduces a new storage system with revision control à la git.
In their words:

> We adopt a delta encoding approach to updates (‘like git, but for data’)
which provides the whole suite of revision control features: branch, merge,
squash, rollback, blame, and time-travel facilitating CI/CD approaches on
data.

In almost fifteen years with an on-and-off relationship with RDF, TerminusDB
is the first database that I try that doesn't force you to manage all the
complexity typically associated with RDF. I believe they have found a
plausible abstraction for people that want to work with graphs without
investing in the guts and bowels of RDF.
"""

[[links]]
title = "Against unnecessary databases"
url = "https://beepb00p.xyz/unnecessary-db.html"
comment = """
A comprehensive list of trade-offs on the topic of maintaining a local copy of
remote data you don't own (or rather, you may own but you don't control).
"""

[[links]]
title = "Stealing data with CSS: Attack and Defense"
url = "https://www.mike-gualtieri.com/posts/stealing-data-with-css-attack-and-defense"
comment = """
CSS Exfil is a method to let an attacker steal targeted data using _CSS
alone_.

Mike Gualtieri explains in detail how the attack works and provides extensions
for Firefox and Chrome to mitigate it.
"""

[[links]]
title = "An Overview of Fuzzy Name Matching Techniques"
url = "https://www.rosette.com/blog/overview-fuzzy-name-matching-techniques/"
comment = """
This article goes through a couple of methods and their strengths and
weaknesses to match names.
"""

[[links]]
title = "The Rust Compilation Model Calamity"
url = "https://pingcap.com/blog/rust-compilation-model-calamity/"
comment = """
This is the first part of a series of articles explaining what trade-offs make
Rust be slow at compile time. The short and oversimplified answer is: fast run
time and strong safe guarantees.
"""

[[links]]
title = "The Rise and Fall of the OLAP Cube"
url = "https://www.holistics.io/blog/the-rise-and-fall-of-the-olap-cube/"
comment = """
This article may interest you in two ways. if you are not familiar with the
concepts of OLTP and OLAP it will serve as a lightweight introduction;
otherwise it will serve to understand why OLAP cubes are less relevant than
they were a decade ago.
"""
