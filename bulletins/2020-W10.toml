date = 2020-03-08
author = "arnau"
id = "2020-W10"
title = "Issue 2020-W10"
type = "Bulletin"
status = "Published"
introduction = """
These are the things that caught my attention this week.
"""

[[links]]
title = "Time Disorder"
url = "https://caolan.uk/articles/time-disorder/"
comment = """
An article with a comprehensive warning against relying on timestamps for
ordering. May or may not apply to your current situation but time is messy and
understanding why will help prevent unpleasant events.

A pearl (of many) you will find in the article:

> Jumps in time can cause problems, so services like ntpd often prefer to slow
down or speed up the system clock until it gradually approaches the correct
time (this is called 'slew' correction).
"""

[[links]]
title = "Please stop recommending Git Flow!"
url = "https://georgestocker.com/2020/03/04/please-stop-recommending-git-flow/"
comment = """
A very much needed article around the hype of gitflow. If you use Git, you
won't regret reading it.
"""

[[links]]
title = "Can I use (Rust)"
url = "https://caniuse.rs/"
comment = """
A service to search for availability and stability of Rust features. Similar
idea but simpler of the famous [caniuse](https://caniuse.com/) for web
features.
"""

[[links]]
title = "The Brave browser is brilliant"
url = "https://rudism.com/the-brave-browser-is-brilliant/"
comment = """
An article explaining the Brave “business model”. Some of us would call this a
scam, judge by yourself.

You might also like this [complementary
reading](https://github.com/lobsters/lobsters/issues/761).
"""

[[links]]
title = "What’s Wrong with Computational Notebooks?"
url = "https://web.eecs.utk.edu/~azh/pubs/Chattopadhyay2020CHI_NotebookPainpoints.pdf"
type = "pdf"
comment = """
A paper describing a field study on the current computational notebook
landscape to identify pain points and improvement opportunities.
"""

[[links]]
title = "Finding your service boundaries"
url = "https://www.youtube.com/watch?v=jdliXz70NtM"
type = "video"
comment = """
A talk on how to organise your system (application, service, etc). Long but
clearly shows how to apply DDD thinking to your system no matter the level of
abstraction.
"""
