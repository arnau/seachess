date = 2020-03-15
author = "arnau"
id = "2020-W11"
title = "Issue 2020-W11"
type = "Bulletin"
status = "Published"
introduction = """
These are the things that caught my attention this week.
"""

[[links]]
title = "Nix: A Reproducible Setup for Linux and macOS"
url = "https://www.nmattia.com/posts/2018-03-21-nix-reproducible-setup-linux-macos.html"
comment = """
A nice and gentle introduction to Nix, the package manager. It helps with the
transition from more classic mental models such as Brew or Apt without being
as dry as the Nix manual or the [Nix pills](https://nixos.org/nixos/nix-pills/index.html).
"""

[[links]]
title = "I Got 99 Problems And Your Hiring Practices Are All Of Them (Part 1)"
url = "https://medium.com/@productivitypinata/i-got-99-problems-and-your-hiring-practices-are-all-of-them-cb1e6a5877ea"
comment = """
An article (part 1 of 6) reflecting on hiring practices that you should likely
consider if your role is to manage a team.
"""

[[links]]
title = "Poetry"
url = "https://python-poetry.org/"
comment = """
A tool to manage Python dependencies. It feels similar to
[Pipenv](https://pipenv.pypa.io) in that makes working with virtual
environments ergonomic. Poetry, though, lets you manage a package lifecycle
whilst Pipenv seems more application oriented.

It's nice to see the Python dependency management space coming out of the dark
ages of `pip`, `virtualenv`, `setup.py` and other horrors.

You might like reading [A deeper look into Pipenv and Poetry](https://frostming.com/2019/01-04/pipenv-poetry)
from one of the collaborators of Pipenv.
"""

[[links]]
title = "The history of the URL"
url = "https://blog.cloudflare.com/the-history-of-the-url/"
comment = """
A well narrated bit of history. Although a bit technical at times, it is
indeed a must if you are interested in the early days of the Internet.
"""

[[links]]
title = "ExpressJS vs Actix-Web. It is exactly what you think"
url = "https://medium.com/@maxsparr0w/performance-of-node-js-compared-to-actix-web-37f20810fb1a"
comment = """
An article comparing Actix-Web (Rust) against ExpressJS (Node.js).
Unsurprisingly, Actix is faster consumes less resources and takes advantage of
multiple CPU cores. As with any benchmark or comparison always read the fine
print to understand the tradeoffs and artificial conditions.

If you consider Rust for web server development have a look at
[Are we web yet?](https://www.arewewebyet.org/) before making the decision. It
may or may not be the right time for your product to adopt Rust in this space.
"""

[[links]]
title = "Why SQL is beating NoSQL, and what this means for the future of data"
url = "https://blog.timescale.com/blog/why-sql-beating-nosql-what-this-means-for-future-of-data-time-series-database-348b777b847a/"
comment = """
An article with a bit of history on the inception of SQL, its decline with the
advent of noSQL and its comeback.
"""
